// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_tags.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyAdminTagsClient is the client API for QyAdminTags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyAdminTagsClient interface {
	// 新增
	CreateQyAdminTags(ctx context.Context, in *CreateQyAdminTagsRequest, opts ...grpc.CallOption) (*CreateQyAdminTagsReply, error)
	// 更新
	UpdateQyAdminTags(ctx context.Context, in *UpdateQyAdminTagsRequest, opts ...grpc.CallOption) (*UpdateQyAdminTagsReply, error)
	// 删除
	DeleteQyAdminTags(ctx context.Context, in *DeleteQyAdminTagsRequest, opts ...grpc.CallOption) (*DeleteQyAdminTagsReply, error)
	GetQyAdminTags(ctx context.Context, in *GetQyAdminTagsRequest, opts ...grpc.CallOption) (*GetQyAdminTagsReply, error)
	// 列表
	ListQyAdminTags(ctx context.Context, in *ListQyAdminTagsRequest, opts ...grpc.CallOption) (*ListQyAdminTagsReply, error)
}

type qyAdminTagsClient struct {
	cc grpc.ClientConnInterface
}

func NewQyAdminTagsClient(cc grpc.ClientConnInterface) QyAdminTagsClient {
	return &qyAdminTagsClient{cc}
}

func (c *qyAdminTagsClient) CreateQyAdminTags(ctx context.Context, in *CreateQyAdminTagsRequest, opts ...grpc.CallOption) (*CreateQyAdminTagsReply, error) {
	out := new(CreateQyAdminTagsReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminTags/CreateQyAdminTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminTagsClient) UpdateQyAdminTags(ctx context.Context, in *UpdateQyAdminTagsRequest, opts ...grpc.CallOption) (*UpdateQyAdminTagsReply, error) {
	out := new(UpdateQyAdminTagsReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminTags/UpdateQyAdminTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminTagsClient) DeleteQyAdminTags(ctx context.Context, in *DeleteQyAdminTagsRequest, opts ...grpc.CallOption) (*DeleteQyAdminTagsReply, error) {
	out := new(DeleteQyAdminTagsReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminTags/DeleteQyAdminTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminTagsClient) GetQyAdminTags(ctx context.Context, in *GetQyAdminTagsRequest, opts ...grpc.CallOption) (*GetQyAdminTagsReply, error) {
	out := new(GetQyAdminTagsReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminTags/GetQyAdminTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminTagsClient) ListQyAdminTags(ctx context.Context, in *ListQyAdminTagsRequest, opts ...grpc.CallOption) (*ListQyAdminTagsReply, error) {
	out := new(ListQyAdminTagsReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminTags/ListQyAdminTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyAdminTagsServer is the server API for QyAdminTags service.
// All implementations must embed UnimplementedQyAdminTagsServer
// for forward compatibility
type QyAdminTagsServer interface {
	// 新增
	CreateQyAdminTags(context.Context, *CreateQyAdminTagsRequest) (*CreateQyAdminTagsReply, error)
	// 更新
	UpdateQyAdminTags(context.Context, *UpdateQyAdminTagsRequest) (*UpdateQyAdminTagsReply, error)
	// 删除
	DeleteQyAdminTags(context.Context, *DeleteQyAdminTagsRequest) (*DeleteQyAdminTagsReply, error)
	GetQyAdminTags(context.Context, *GetQyAdminTagsRequest) (*GetQyAdminTagsReply, error)
	// 列表
	ListQyAdminTags(context.Context, *ListQyAdminTagsRequest) (*ListQyAdminTagsReply, error)
	mustEmbedUnimplementedQyAdminTagsServer()
}

// UnimplementedQyAdminTagsServer must be embedded to have forward compatible implementations.
type UnimplementedQyAdminTagsServer struct {
}

func (UnimplementedQyAdminTagsServer) CreateQyAdminTags(context.Context, *CreateQyAdminTagsRequest) (*CreateQyAdminTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyAdminTags not implemented")
}
func (UnimplementedQyAdminTagsServer) UpdateQyAdminTags(context.Context, *UpdateQyAdminTagsRequest) (*UpdateQyAdminTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyAdminTags not implemented")
}
func (UnimplementedQyAdminTagsServer) DeleteQyAdminTags(context.Context, *DeleteQyAdminTagsRequest) (*DeleteQyAdminTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyAdminTags not implemented")
}
func (UnimplementedQyAdminTagsServer) GetQyAdminTags(context.Context, *GetQyAdminTagsRequest) (*GetQyAdminTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyAdminTags not implemented")
}
func (UnimplementedQyAdminTagsServer) ListQyAdminTags(context.Context, *ListQyAdminTagsRequest) (*ListQyAdminTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyAdminTags not implemented")
}
func (UnimplementedQyAdminTagsServer) mustEmbedUnimplementedQyAdminTagsServer() {}

// UnsafeQyAdminTagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyAdminTagsServer will
// result in compilation errors.
type UnsafeQyAdminTagsServer interface {
	mustEmbedUnimplementedQyAdminTagsServer()
}

func RegisterQyAdminTagsServer(s grpc.ServiceRegistrar, srv QyAdminTagsServer) {
	s.RegisterService(&QyAdminTags_ServiceDesc, srv)
}

func _QyAdminTags_CreateQyAdminTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyAdminTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminTagsServer).CreateQyAdminTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminTags/CreateQyAdminTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminTagsServer).CreateQyAdminTags(ctx, req.(*CreateQyAdminTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminTags_UpdateQyAdminTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyAdminTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminTagsServer).UpdateQyAdminTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminTags/UpdateQyAdminTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminTagsServer).UpdateQyAdminTags(ctx, req.(*UpdateQyAdminTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminTags_DeleteQyAdminTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyAdminTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminTagsServer).DeleteQyAdminTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminTags/DeleteQyAdminTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminTagsServer).DeleteQyAdminTags(ctx, req.(*DeleteQyAdminTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminTags_GetQyAdminTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyAdminTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminTagsServer).GetQyAdminTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminTags/GetQyAdminTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminTagsServer).GetQyAdminTags(ctx, req.(*GetQyAdminTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminTags_ListQyAdminTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyAdminTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminTagsServer).ListQyAdminTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminTags/ListQyAdminTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminTagsServer).ListQyAdminTags(ctx, req.(*ListQyAdminTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyAdminTags_ServiceDesc is the grpc.ServiceDesc for QyAdminTags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyAdminTags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.admin.v1.QyAdminTags",
	HandlerType: (*QyAdminTagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyAdminTags",
			Handler:    _QyAdminTags_CreateQyAdminTags_Handler,
		},
		{
			MethodName: "UpdateQyAdminTags",
			Handler:    _QyAdminTags_UpdateQyAdminTags_Handler,
		},
		{
			MethodName: "DeleteQyAdminTags",
			Handler:    _QyAdminTags_DeleteQyAdminTags_Handler,
		},
		{
			MethodName: "GetQyAdminTags",
			Handler:    _QyAdminTags_GetQyAdminTags_Handler,
		},
		{
			MethodName: "ListQyAdminTags",
			Handler:    _QyAdminTags_ListQyAdminTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/admin/v1/qy_admin_tags.proto",
}
