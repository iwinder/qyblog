// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyAdminCommentClient is the client API for QyAdminComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyAdminCommentClient interface {
	// 创建
	CreateQyAdminComment(ctx context.Context, in *CreateQyAdminCommentRequest, opts ...grpc.CallOption) (*CreateQyAdminCommentReply, error)
	// 更新
	UpdateQyAdminComment(ctx context.Context, in *UpdateQyAdminCommentRequest, opts ...grpc.CallOption) (*UpdateQyAdminCommentReply, error)
	// 更新评论内容
	UpdateQyAdminCommentContent(ctx context.Context, in *UpdateQyAdminCommentRequest, opts ...grpc.CallOption) (*UpdateQyAdminCommentReply, error)
	// 更新状态
	UpdateQyAdminCommentState(ctx context.Context, in *UpdateQyAdminCommentStateRequest, opts ...grpc.CallOption) (*UpdateQyAdminCommentStateReply, error)
	// 删除
	DeleteQyAdminComment(ctx context.Context, in *DeleteQyAdminCommentRequest, opts ...grpc.CallOption) (*DeleteQyAdminCommentReply, error)
	GetQyAdminComment(ctx context.Context, in *GetQyAdminCommentRequest, opts ...grpc.CallOption) (*GetQyAdminCommentReply, error)
	// 获取列表
	ListQyAdminComment(ctx context.Context, in *ListQyAdminCommentRequest, opts ...grpc.CallOption) (*ListQyAdminCommentReply, error)
	// 获取评论总计
	GetQyAdminCommentCount(ctx context.Context, in *GetQyAdminCommentCountRequest, opts ...grpc.CallOption) (*GetQyAdminCommentCountReply, error)
}

type qyAdminCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewQyAdminCommentClient(cc grpc.ClientConnInterface) QyAdminCommentClient {
	return &qyAdminCommentClient{cc}
}

func (c *qyAdminCommentClient) CreateQyAdminComment(ctx context.Context, in *CreateQyAdminCommentRequest, opts ...grpc.CallOption) (*CreateQyAdminCommentReply, error) {
	out := new(CreateQyAdminCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/CreateQyAdminComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) UpdateQyAdminComment(ctx context.Context, in *UpdateQyAdminCommentRequest, opts ...grpc.CallOption) (*UpdateQyAdminCommentReply, error) {
	out := new(UpdateQyAdminCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/UpdateQyAdminComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) UpdateQyAdminCommentContent(ctx context.Context, in *UpdateQyAdminCommentRequest, opts ...grpc.CallOption) (*UpdateQyAdminCommentReply, error) {
	out := new(UpdateQyAdminCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/UpdateQyAdminCommentContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) UpdateQyAdminCommentState(ctx context.Context, in *UpdateQyAdminCommentStateRequest, opts ...grpc.CallOption) (*UpdateQyAdminCommentStateReply, error) {
	out := new(UpdateQyAdminCommentStateReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/UpdateQyAdminCommentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) DeleteQyAdminComment(ctx context.Context, in *DeleteQyAdminCommentRequest, opts ...grpc.CallOption) (*DeleteQyAdminCommentReply, error) {
	out := new(DeleteQyAdminCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/DeleteQyAdminComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) GetQyAdminComment(ctx context.Context, in *GetQyAdminCommentRequest, opts ...grpc.CallOption) (*GetQyAdminCommentReply, error) {
	out := new(GetQyAdminCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/GetQyAdminComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) ListQyAdminComment(ctx context.Context, in *ListQyAdminCommentRequest, opts ...grpc.CallOption) (*ListQyAdminCommentReply, error) {
	out := new(ListQyAdminCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/ListQyAdminComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminCommentClient) GetQyAdminCommentCount(ctx context.Context, in *GetQyAdminCommentCountRequest, opts ...grpc.CallOption) (*GetQyAdminCommentCountReply, error) {
	out := new(GetQyAdminCommentCountReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminComment/GetQyAdminCommentCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyAdminCommentServer is the server API for QyAdminComment service.
// All implementations must embed UnimplementedQyAdminCommentServer
// for forward compatibility
type QyAdminCommentServer interface {
	// 创建
	CreateQyAdminComment(context.Context, *CreateQyAdminCommentRequest) (*CreateQyAdminCommentReply, error)
	// 更新
	UpdateQyAdminComment(context.Context, *UpdateQyAdminCommentRequest) (*UpdateQyAdminCommentReply, error)
	// 更新评论内容
	UpdateQyAdminCommentContent(context.Context, *UpdateQyAdminCommentRequest) (*UpdateQyAdminCommentReply, error)
	// 更新状态
	UpdateQyAdminCommentState(context.Context, *UpdateQyAdminCommentStateRequest) (*UpdateQyAdminCommentStateReply, error)
	// 删除
	DeleteQyAdminComment(context.Context, *DeleteQyAdminCommentRequest) (*DeleteQyAdminCommentReply, error)
	GetQyAdminComment(context.Context, *GetQyAdminCommentRequest) (*GetQyAdminCommentReply, error)
	// 获取列表
	ListQyAdminComment(context.Context, *ListQyAdminCommentRequest) (*ListQyAdminCommentReply, error)
	// 获取评论总计
	GetQyAdminCommentCount(context.Context, *GetQyAdminCommentCountRequest) (*GetQyAdminCommentCountReply, error)
	mustEmbedUnimplementedQyAdminCommentServer()
}

// UnimplementedQyAdminCommentServer must be embedded to have forward compatible implementations.
type UnimplementedQyAdminCommentServer struct {
}

func (UnimplementedQyAdminCommentServer) CreateQyAdminComment(context.Context, *CreateQyAdminCommentRequest) (*CreateQyAdminCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyAdminComment not implemented")
}
func (UnimplementedQyAdminCommentServer) UpdateQyAdminComment(context.Context, *UpdateQyAdminCommentRequest) (*UpdateQyAdminCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyAdminComment not implemented")
}
func (UnimplementedQyAdminCommentServer) UpdateQyAdminCommentContent(context.Context, *UpdateQyAdminCommentRequest) (*UpdateQyAdminCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyAdminCommentContent not implemented")
}
func (UnimplementedQyAdminCommentServer) UpdateQyAdminCommentState(context.Context, *UpdateQyAdminCommentStateRequest) (*UpdateQyAdminCommentStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyAdminCommentState not implemented")
}
func (UnimplementedQyAdminCommentServer) DeleteQyAdminComment(context.Context, *DeleteQyAdminCommentRequest) (*DeleteQyAdminCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyAdminComment not implemented")
}
func (UnimplementedQyAdminCommentServer) GetQyAdminComment(context.Context, *GetQyAdminCommentRequest) (*GetQyAdminCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyAdminComment not implemented")
}
func (UnimplementedQyAdminCommentServer) ListQyAdminComment(context.Context, *ListQyAdminCommentRequest) (*ListQyAdminCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyAdminComment not implemented")
}
func (UnimplementedQyAdminCommentServer) GetQyAdminCommentCount(context.Context, *GetQyAdminCommentCountRequest) (*GetQyAdminCommentCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyAdminCommentCount not implemented")
}
func (UnimplementedQyAdminCommentServer) mustEmbedUnimplementedQyAdminCommentServer() {}

// UnsafeQyAdminCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyAdminCommentServer will
// result in compilation errors.
type UnsafeQyAdminCommentServer interface {
	mustEmbedUnimplementedQyAdminCommentServer()
}

func RegisterQyAdminCommentServer(s grpc.ServiceRegistrar, srv QyAdminCommentServer) {
	s.RegisterService(&QyAdminComment_ServiceDesc, srv)
}

func _QyAdminComment_CreateQyAdminComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyAdminCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).CreateQyAdminComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/CreateQyAdminComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).CreateQyAdminComment(ctx, req.(*CreateQyAdminCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_UpdateQyAdminComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyAdminCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).UpdateQyAdminComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/UpdateQyAdminComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).UpdateQyAdminComment(ctx, req.(*UpdateQyAdminCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_UpdateQyAdminCommentContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyAdminCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).UpdateQyAdminCommentContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/UpdateQyAdminCommentContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).UpdateQyAdminCommentContent(ctx, req.(*UpdateQyAdminCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_UpdateQyAdminCommentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyAdminCommentStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).UpdateQyAdminCommentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/UpdateQyAdminCommentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).UpdateQyAdminCommentState(ctx, req.(*UpdateQyAdminCommentStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_DeleteQyAdminComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyAdminCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).DeleteQyAdminComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/DeleteQyAdminComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).DeleteQyAdminComment(ctx, req.(*DeleteQyAdminCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_GetQyAdminComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyAdminCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).GetQyAdminComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/GetQyAdminComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).GetQyAdminComment(ctx, req.(*GetQyAdminCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_ListQyAdminComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyAdminCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).ListQyAdminComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/ListQyAdminComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).ListQyAdminComment(ctx, req.(*ListQyAdminCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminComment_GetQyAdminCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyAdminCommentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminCommentServer).GetQyAdminCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminComment/GetQyAdminCommentCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminCommentServer).GetQyAdminCommentCount(ctx, req.(*GetQyAdminCommentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyAdminComment_ServiceDesc is the grpc.ServiceDesc for QyAdminComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyAdminComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.admin.v1.QyAdminComment",
	HandlerType: (*QyAdminCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyAdminComment",
			Handler:    _QyAdminComment_CreateQyAdminComment_Handler,
		},
		{
			MethodName: "UpdateQyAdminComment",
			Handler:    _QyAdminComment_UpdateQyAdminComment_Handler,
		},
		{
			MethodName: "UpdateQyAdminCommentContent",
			Handler:    _QyAdminComment_UpdateQyAdminCommentContent_Handler,
		},
		{
			MethodName: "UpdateQyAdminCommentState",
			Handler:    _QyAdminComment_UpdateQyAdminCommentState_Handler,
		},
		{
			MethodName: "DeleteQyAdminComment",
			Handler:    _QyAdminComment_DeleteQyAdminComment_Handler,
		},
		{
			MethodName: "GetQyAdminComment",
			Handler:    _QyAdminComment_GetQyAdminComment_Handler,
		},
		{
			MethodName: "ListQyAdminComment",
			Handler:    _QyAdminComment_ListQyAdminComment_Handler,
		},
		{
			MethodName: "GetQyAdminCommentCount",
			Handler:    _QyAdminComment_GetQyAdminCommentCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/admin/v1/qy_admin_comment.proto",
}
