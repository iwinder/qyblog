// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_article.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyWebArticleGetQyWebArticle = "/api.qycms_bff.web.v1.QyWebArticle/GetQyWebArticle"
const OperationQyWebArticleGetQyWebCategory = "/api.qycms_bff.web.v1.QyWebArticle/GetQyWebCategory"
const OperationQyWebArticleGetQyWebMinaArticle = "/api.qycms_bff.web.v1.QyWebArticle/GetQyWebMinaArticle"
const OperationQyWebArticleGetQyWebTag = "/api.qycms_bff.web.v1.QyWebArticle/GetQyWebTag"
const OperationQyWebArticleListQyWebArticle = "/api.qycms_bff.web.v1.QyWebArticle/ListQyWebArticle"
const OperationQyWebArticleListQyWebArticleResources = "/api.qycms_bff.web.v1.QyWebArticle/ListQyWebArticleResources"
const OperationQyWebArticleListQyWebMinaArticle = "/api.qycms_bff.web.v1.QyWebArticle/ListQyWebMinaArticle"

type QyWebArticleHTTPServer interface {
	GetQyWebArticle(context.Context, *GetQyWebArticleRequest) (*GetQyWebArticleReply, error)
	GetQyWebCategory(context.Context, *GetQyWebCategoryRequest) (*GetQyWebCategoryReply, error)
	GetQyWebMinaArticle(context.Context, *GetQyWebArticleRequest) (*GetQyWebMinaArticleReply, error)
	GetQyWebTag(context.Context, *GetQyWebTagRequest) (*GetQyWebTagReply, error)
	ListQyWebArticle(context.Context, *ListQyWebArticleRequest) (*ListQyWebArticleReply, error)
	ListQyWebArticleResources(context.Context, *ListQyWebArticleResourcesRequest) (*ListQyWebArticleResourcesReply, error)
	ListQyWebMinaArticle(context.Context, *ListQyWebArticleRequest) (*ListQyWebArticleReply, error)
}

func RegisterQyWebArticleHTTPServer(s *http.Server, srv QyWebArticleHTTPServer) {
	r := s.Route("/")
	r.GET("/api/web/v1/article/{name}", _QyWebArticle_GetQyWebArticle0_HTTP_Handler(srv))
	r.GET("/api/web/v1/article", _QyWebArticle_ListQyWebArticle0_HTTP_Handler(srv))
	r.GET("/api/web/v1/tag/{name}", _QyWebArticle_GetQyWebTag0_HTTP_Handler(srv))
	r.GET("/api/web/v1/category/{name}", _QyWebArticle_GetQyWebCategory0_HTTP_Handler(srv))
	r.GET("/api/web/v1/article/resources", _QyWebArticle_ListQyWebArticleResources0_HTTP_Handler(srv))
	r.GET("/api/web/v1/mina/article/{name}", _QyWebArticle_GetQyWebMinaArticle0_HTTP_Handler(srv))
	r.GET("/api/web/v1/mina/article", _QyWebArticle_ListQyWebMinaArticle0_HTTP_Handler(srv))
}

func _QyWebArticle_GetQyWebArticle0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyWebArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleGetQyWebArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyWebArticle(ctx, req.(*GetQyWebArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyWebArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebArticle_ListQyWebArticle0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleListQyWebArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebArticle(ctx, req.(*ListQyWebArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebArticle_GetQyWebTag0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyWebTagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleGetQyWebTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyWebTag(ctx, req.(*GetQyWebTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyWebTagReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebArticle_GetQyWebCategory0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyWebCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleGetQyWebCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyWebCategory(ctx, req.(*GetQyWebCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyWebCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebArticle_ListQyWebArticleResources0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebArticleResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleListQyWebArticleResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebArticleResources(ctx, req.(*ListQyWebArticleResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebArticleResourcesReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebArticle_GetQyWebMinaArticle0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyWebArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleGetQyWebMinaArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyWebMinaArticle(ctx, req.(*GetQyWebArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyWebMinaArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebArticle_ListQyWebMinaArticle0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleListQyWebMinaArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebMinaArticle(ctx, req.(*ListQyWebArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebArticleReply)
		return ctx.Result(200, reply)
	}
}

type QyWebArticleHTTPClient interface {
	GetQyWebArticle(ctx context.Context, req *GetQyWebArticleRequest, opts ...http.CallOption) (rsp *GetQyWebArticleReply, err error)
	GetQyWebCategory(ctx context.Context, req *GetQyWebCategoryRequest, opts ...http.CallOption) (rsp *GetQyWebCategoryReply, err error)
	GetQyWebMinaArticle(ctx context.Context, req *GetQyWebArticleRequest, opts ...http.CallOption) (rsp *GetQyWebMinaArticleReply, err error)
	GetQyWebTag(ctx context.Context, req *GetQyWebTagRequest, opts ...http.CallOption) (rsp *GetQyWebTagReply, err error)
	ListQyWebArticle(ctx context.Context, req *ListQyWebArticleRequest, opts ...http.CallOption) (rsp *ListQyWebArticleReply, err error)
	ListQyWebArticleResources(ctx context.Context, req *ListQyWebArticleResourcesRequest, opts ...http.CallOption) (rsp *ListQyWebArticleResourcesReply, err error)
	ListQyWebMinaArticle(ctx context.Context, req *ListQyWebArticleRequest, opts ...http.CallOption) (rsp *ListQyWebArticleReply, err error)
}

type QyWebArticleHTTPClientImpl struct {
	cc *http.Client
}

func NewQyWebArticleHTTPClient(client *http.Client) QyWebArticleHTTPClient {
	return &QyWebArticleHTTPClientImpl{client}
}

func (c *QyWebArticleHTTPClientImpl) GetQyWebArticle(ctx context.Context, in *GetQyWebArticleRequest, opts ...http.CallOption) (*GetQyWebArticleReply, error) {
	var out GetQyWebArticleReply
	pattern := "/api/web/v1/article/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleGetQyWebArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebArticleHTTPClientImpl) GetQyWebCategory(ctx context.Context, in *GetQyWebCategoryRequest, opts ...http.CallOption) (*GetQyWebCategoryReply, error) {
	var out GetQyWebCategoryReply
	pattern := "/api/web/v1/category/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleGetQyWebCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebArticleHTTPClientImpl) GetQyWebMinaArticle(ctx context.Context, in *GetQyWebArticleRequest, opts ...http.CallOption) (*GetQyWebMinaArticleReply, error) {
	var out GetQyWebMinaArticleReply
	pattern := "/api/web/v1/mina/article/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleGetQyWebMinaArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebArticleHTTPClientImpl) GetQyWebTag(ctx context.Context, in *GetQyWebTagRequest, opts ...http.CallOption) (*GetQyWebTagReply, error) {
	var out GetQyWebTagReply
	pattern := "/api/web/v1/tag/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleGetQyWebTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebArticleHTTPClientImpl) ListQyWebArticle(ctx context.Context, in *ListQyWebArticleRequest, opts ...http.CallOption) (*ListQyWebArticleReply, error) {
	var out ListQyWebArticleReply
	pattern := "/api/web/v1/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleListQyWebArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebArticleHTTPClientImpl) ListQyWebArticleResources(ctx context.Context, in *ListQyWebArticleResourcesRequest, opts ...http.CallOption) (*ListQyWebArticleResourcesReply, error) {
	var out ListQyWebArticleResourcesReply
	pattern := "/api/web/v1/article/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleListQyWebArticleResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebArticleHTTPClientImpl) ListQyWebMinaArticle(ctx context.Context, in *ListQyWebArticleRequest, opts ...http.CallOption) (*ListQyWebArticleReply, error) {
	var out ListQyWebArticleReply
	pattern := "/api/web/v1/mina/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleListQyWebMinaArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
