// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/iwinder/qingyucms/internal/qycms_blog/biz"
	"github.com/iwinder/qingyucms/internal/qycms_blog/conf"
	"github.com/iwinder/qingyucms/internal/qycms_blog/data/db"
	"github.com/iwinder/qingyucms/internal/qycms_blog/job"
	"github.com/iwinder/qingyucms/internal/qycms_blog/job/jbiz"
	"github.com/iwinder/qingyucms/internal/qycms_blog/server"
	"github.com/iwinder/qingyucms/internal/qycms_blog/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, qycms *conf.Qycms, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	dbData, cleanup, err := db.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	casbinData, err := db.NewCasbinData(dbData, auth, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepo := db.NewUserRepo(dbData, logger)
	roleRepo := db.NewRoleRepo(dbData, logger)
	casbinRuleRepo := db.NewCasbinRuleRepo(casbinData, logger)
	roleMenusRepo := db.NewRoleMenusRepo(dbData, logger)
	roleMenusUsecase := biz.NewRoleMenusUsecase(roleMenusRepo, logger)
	roleApiRepo := db.NewRoleApiRepo(dbData, logger)
	roleApiUsecase := biz.NewRoleApiUsecase(roleApiRepo, casbinRuleRepo, logger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, casbinRuleRepo, roleMenusUsecase, roleApiUsecase, logger)
	userRoleRepo := db.NewUserRoleRepo(dbData, logger)
	userRoleUsecase := biz.NewUserRoleUsecase(userRoleRepo, casbinRuleRepo, logger)
	userUsecase := biz.NewUserUsecase(userRepo, roleUsecase, userRoleUsecase, logger)
	apiRepo := db.NewApiRepo(dbData, logger)
	apiGroupRepo := db.NewApiGroupRepo(dbData, logger)
	apiGroupUsecase := biz.NewApiGroupUsecase(apiGroupRepo, logger)
	apiUsecase := biz.NewApiUsecase(apiRepo, apiGroupUsecase, casbinRuleRepo, logger)
	menusAdminRepo := db.NewMenusAdminRepo(dbData, logger)
	menusAdminUsecase := biz.NewMenusAdminUsecase(menusAdminRepo, logger)
	fileLibTypeRepo := db.NewFileLibTypeRepo(dbData, logger)
	fileLibTypeUsecase := biz.NewFileLibTypeUsecase(fileLibTypeRepo, logger)
	fileLibConfigRepo := db.NewFileLibConfigRepo(dbData, logger)
	fileLibConfigUsecase := biz.NewFileLibConfigUsecase(fileLibConfigRepo, logger)
	fileLibRepo := db.NewFileLibRepo(dbData, logger)
	fileLibUsecase := biz.NewFileLibUsecase(fileLibRepo, logger)
	siteConfigRepo := db.NewSiteConfigRepo(dbData, logger)
	siteConfigUsecase := biz.NewSiteConfigUsecase(siteConfigRepo, logger)
	linkRepo := db.NewLinkRepo(dbData, logger)
	linkUsecase := biz.NewLinkUsecase(linkRepo, logger)
	shortLinkRepo := db.NewShortLinkRepo(dbData, logger)
	shortLinkUsecase := biz.NewShortLinkUsecase(shortLinkRepo, logger)
	menusAgentRepo := db.NewMenusAgentRepo(dbData, logger)
	menusAgentUsecase := biz.NewMenusAgentUsecase(menusAgentRepo, logger)
	menusRepo := db.NewMenusRepo(dbData, logger)
	menusUsecase := biz.NewMenusUsecase(menusRepo, logger)
	tagsRepo := db.NewTagsRepo(dbData, logger)
	tagsUsecase := biz.NewTagsUsecase(tagsRepo, logger)
	categoryRepo := db.NewCategoryRepo(dbData, logger)
	categoryUsecase := biz.NewCategoryUsecase(categoryRepo, logger)
	articleRepo := db.NewArticleRepo(dbData, logger)
	articleContentRepo := db.NewArticleContentRepo(dbData, logger)
	articleContentUsecase := biz.NewArticleContentUsecase(articleContentRepo, logger)
	articleTagsRepo := db.NewArticleTagsRepo(dbData, logger)
	articleTagsUsecase := biz.NewArticleTagsUsecase(articleTagsRepo, tagsUsecase, logger)
	commentAgentRepo := db.NewCommentAgentRepo(dbData, logger)
	commentAgentUsecase := biz.NewCommentAgentUsecase(commentAgentRepo, logger)
	articleResourceRepo := db.NewArticleResourceRepo(dbData, logger)
	articleResourceUsecase := biz.NewArticleResourceUsecase(articleResourceRepo, logger)
	articleUsecase := biz.NewArticleUsecase(articleRepo, logger, articleContentUsecase, articleTagsUsecase, commentAgentUsecase, categoryUsecase, articleResourceUsecase)
	commentContentRepo := db.NewCommentContentRepo(dbData, logger)
	commentIndexRepo := db.NewCommentIndexRepo(dbData, logger)
	commentIndexUsecase := biz.NewCommentIndexUsecase(commentIndexRepo, logger)
	commentContentUsecase := biz.NewCommentContentUsecase(commentContentRepo, logger, articleUsecase, commentIndexUsecase, userUsecase)
	commentUsecase := biz.NewCommentUsecase(logger, commentAgentUsecase, commentIndexUsecase, userUsecase, articleUsecase, commentContentUsecase, siteConfigUsecase)
	siteMapUsecase := biz.NewSiteMapUsecase(logger, siteConfigUsecase, articleUsecase)
	blogAdminUserService := service.NewBlogAdminUserService(userUsecase, roleUsecase, apiUsecase, roleMenusUsecase, apiGroupUsecase, menusAdminUsecase, roleApiUsecase, fileLibTypeUsecase, fileLibConfigUsecase, fileLibUsecase, siteConfigUsecase, linkUsecase, shortLinkUsecase, menusAgentUsecase, menusUsecase, tagsUsecase, categoryUsecase, articleUsecase, commentContentUsecase, commentUsecase, siteMapUsecase, qycms, auth)
	articleVisitorRepo := db.NewArticleVisitorRepo(dbData, logger)
	articleVisitorUsecase := biz.NewArticleVisitorUsecase(articleVisitorRepo, logger)
	blogWebApiService := service.NewBlogWebApiService(siteConfigUsecase, articleUsecase, menusUsecase, linkUsecase, shortLinkUsecase, categoryUsecase, tagsUsecase, commentUsecase, articleVisitorUsecase, articleResourceUsecase, qycms)
	httpServer := server.NewHTTPServer(confServer, auth, casbinData, blogAdminUserService, blogWebApiService, logger)
	blogAdminJobsService := service.NewBlogAdminJobsService(qycms, commentUsecase, articleUsecase, siteMapUsecase)
	countCommentJobRepo := jbiz.NewCountCommentJobRepo(blogAdminJobsService, logger)
	postVCountJobRepo := jbiz.NewPostVCountJobRepo(blogAdminJobsService, logger)
	siteMapJobRepo := jbiz.NewSiteMapJobRepo(blogAdminJobsService, logger)
	emailSendJobRepo := jbiz.NewEmailSendJobRepo(blogAdminJobsService, logger)
	cronJobServer := job.NewCronJobServer(qycms, logger, countCommentJobRepo, postVCountJobRepo, siteMapJobRepo, emailSendJobRepo)
	qyCronJob := server.NewQyCronJob(logger, cronJobServer)
	app := newApp(logger, httpServer, qyCronJob)
	return app, func() {
		cleanup()
	}, nil
}
